@page "/"
@using Hackathon.Data
@inject Hackathon.Data.GameState Game

<h2 style="text-align:center; font-size:2.4rem; margin-top:28px; margin-bottom:36px;">
    🌏 永續大富翁 🌏
</h2>

<div style="display:flex; justify-content:space-around; margin-bottom:30px; font-size:1.4rem; font-weight:600;">
    <div>💰 &nbsp;&nbsp; @Game.Money</div>
    <div>🌿 &nbsp;&nbsp; @Game.EcoScore</div>
    <div>🏛️ &nbsp;&nbsp; @Game.SocialScore</div>
    <div>📅 &nbsp;&nbsp; @Game.Week</div>
</div>

<div class="board">
    @foreach (var t in ring)
    {
        var pos = GetPos(t.Name);
        var isPlayer = (t.Id == Game.PlayerIndex);

        <div class="tile @(isPlayer ? "player-tile" : "")"
            style="left:@pos.xpx; top:@pos.ypx; width:@pos.wpx; height:@pos.hpx; line-height:@pos.hpx;"
            @ondblclick='() => { if (t.Type == "City") OpenCardPicker(t); }'>
            @t.Name
        </div>
    }

    <div class="center-dice">
        <button class="dice-button" @onclick="RollDice">🎲 MOVE</button>
        <div class="dice-result">@lastRoll</div>
    </div>
</div>

@if (showCardPicker)
{
    <div class="overlay">
        <div class="dialog">
            <h3 style="margin-bottom:12px;">@currentTileTitle</h3>
            <div class="card-list">
                @foreach (var card in cardDeck)
                {
                    <div class="card-item rarity-bg-@card.Rarity" @onclick="() => PickCard(card)">
                        <div class="card-title">@card.Title</div>
                        <div class="card-meta">
                            <span class="card-city">@card.City</span>
                            <span class="card-rarity rarity-@card.Rarity">@card.Rarity</span>
                        </div>
                        @if (!string.IsNullOrEmpty(card.ImagePath))
                        {
                            <img src="@card.ImagePath" alt="@card.Title" class="card-image" />
                        }
                        else
                        {
                            <div class="card-image"></div>
                        }
                        <div class="card-stats">
                            <div>💰 @card.MoneyChange 🌿 @card.EcoChange 🏛️ @card.SocialChange</div>
                        </div>
                        <div class="card-desc">@card.Description</div>
                    </div>
                }
            </div>
            <button class="close-button" @onclick="CloseCardPicker">✖</button>
        </div>
    </div>
}

@if (showTransportPicker)
{
    <div class="overlay">
        <div class="dialog">
            <h3>@currentTileTitle</h3>
            <div class="transport-list">
                @foreach (var (city, cost) in transportOptions)
                {
                    <button class="transport-btn" @onclick="() => TravelTo(city, cost)">
                        @city &nbsp; $@cost
                    </button>
                }
            </div>
            <button class="close-button" @onclick="CloseTransportPicker">✖</button>
        </div>
    </div>
}

@code {
    const int ROWS = 6, COLS = 10;
    int lastRoll = 0;

    bool showCardPicker = false;
    bool showTransportPicker = false;
    string transportType = "";
    string currentTileTitle = "";
    Tile? currentTile;

    List<CardInfo> cardDeck = new();
    List<(string city, int cost)> transportOptions = new();

    // 🟦 車票價目表
    static readonly Dictionary<(string type, string to), int> RealFareNTD = new()
    {
        // 高鐵（南港出發）
        { ("高鐵","台北"),260 },{ ("高鐵","新北"),310 },{ ("高鐵","桃園"),500 },
        { ("高鐵","新竹"),700 },{ ("高鐵","苗栗"),920 },{ ("高鐵","台中"),1330 },
        { ("高鐵","彰化"),1510 },{ ("高鐵","雲林"),1510 },{ ("高鐵","嘉義"),1120 },
        { ("高鐵","台南"),1390 },{ ("高鐵","高雄"),1530 },

        // 機場（桃園出發）
        { ("機場","台北"),1000 },{ ("機場","高雄"),2800 },{ ("機場","台中"),2200 },
        { ("機場","金馬"),2400 },{ ("機場","澎湖"),2300 },{ ("機場","台南"),2500 },
        { ("機場","台東"),2700 },{ ("機場","花蓮"),3000 },{ ("機場","嘉義"),2200 },

        // 台鐵（台中出發）
        { ("台鐵","台北"),375 },{ ("台鐵","新北"),350 },{ ("台鐵","桃園"),340 },
        { ("台鐵","新竹"),310 },{ ("台鐵","苗栗"),120 },{ ("台鐵","彰化"),60 },
        { ("台鐵","雲林"),115 },{ ("台鐵","嘉義"),180 },{ ("台鐵","台南"),250 },
        { ("台鐵","高雄"),380 },{ ("台鐵","屏東"),430 },{ ("台鐵","宜蘭"),420 },
        { ("台鐵","花蓮"),750 },{ ("台鐵","台東"),920 },{ ("台鐵","基隆"),410 }
    };

    // 🧩 棋盤格設定
    static string TypeOf(string name) => name.Trim() switch
    {
        "事件1" or "事件2" or "事件3" or "事件4" or "事件5" or "事件6" => "Event",
        "高鐵" or "機場" or "台鐵" => "Transport",
        _ => "City"
    };

    // ✅ CHANGED: 自訂「走訪順序」——骰子移動依此前進
    // （以下先用你現有外框次序；隨時可調整/重排）
    readonly string[] traverseOrder = new[]
    {
        // 上邊 10 格（左→右）
        "台南","高雄","屏東","事件1","台東","花蓮","宜蘭","事件2","基隆","高鐵",
        // 右邊 4 格（上→下）
        "新北","事件3","台北","桃園",
        // 下邊 10 格（右→左）
        "機場","新竹","事件4","金馬","苗栗","事件5","南投","澎湖","台中","台鐵",
        // 左邊 4 格（下→上）
        "彰化","雲林","事件6","嘉義"
    };

    // === 自訂每個格子的座標與大小（不規則地圖） ===
    static readonly Dictionary<string, (int x, int y, int w, int h)> CustomPos = new()
    {
        { "台南", (20, 20, 96, 96) },
        { "高雄", (120, 25, 92, 92) },
        { "屏東", (225, 35, 88, 88) },
        { "事件1", (340, 45, 84, 84) },    // 🟩 新增事件格1
        { "台東", (450, 50, 90, 90) },
        { "花蓮", (560, 40, 96, 96) },
        { "宜蘭", (670, 30, 90, 90) },
        { "事件2", (775, 35, 84, 84) },    // 🟩 新增事件格2
        { "基隆", (875, 25, 96, 96) },
        { "高鐵", (960, 60, 96, 96) },

        { "新北", (960, 180, 92, 92) },
        { "事件3", (960, 295, 84, 84) },    // 🟩 新增事件格3
        { "台北", (950, 410, 96, 96) },
        { "桃園", (920, 460, 92, 92) },

        { "機場", (880, 560, 96, 96) },
        { "新竹", (790, 540, 92, 92) },
        { "事件4", (700, 535, 84, 84) },    // 🟩 新增事件格4
        { "金馬", (600, 510, 88, 88) },
        { "苗栗", (530, 490, 90, 90) },
        { "事件5", (440, 480, 84, 84) },    // 🟩 新增事件格5
        { "南投", (350, 460, 96, 96) },
        { "澎湖", (200, 460, 96, 96) },
        { "台中", (100, 460, 96, 96) },
        { "台鐵", (20, 450, 96, 96) },

        { "彰化", (20, 380, 88, 88) },
        { "雲林", (80, 300, 92, 92) },
        { "事件6", (10, 200, 92, 92) },
        { "嘉義", (20, 130, 92, 92) }
    };

    record Tile(int Id, string Name, string Type);
    List<Tile> ring = new();

    const int BoardW = 980, BoardH = 580;  // .board 內部參考尺寸
    const int Cell = 80;                    // 預設格大小
    const int Gap  = 12;                    // 格與格間距
    const int TopCount = 10;                // 上底邊格數
    const int RightCount = 4;               // 右邊格數
    const int BottomCount = 9;              // 下邊（除了角落已占用）
    const int LeftCount = 3;                // 左邊格數

    protected override void OnInitialized()
    {
        BuildRing();                        // ✅ CHANGED: 不再掃 2D；直接依序建立節點
        if (Game.PlayerIndex < 0 || Game.Week == 1)
            Game.PlayerIndex = ring.FindIndex(t => t.Name == "台南"); // 起點：台南
    }

    void BuildRing()
    {
        ring.Clear();
        int id = 0;
        foreach (var name in traverseOrder)
        {
            ring.Add(new Tile(id++, name, TypeOf(name)));
        }
    }

    // ✅ CHANGED: 回傳每個名稱的座標與尺寸（優先用 CustomPos，否則算在外框上）
    (string xpx,string ypx,string wpx,string hpx) GetPos(string name)
    {
        if (CustomPos.TryGetValue(name, out var p))
            return ($"{p.x}px",$"{p.y}px",$"{p.w}px",$"{p.h}px");

        // 預設外框：把 traverseOrder 投影到矩形外框
        int idx = Array.IndexOf(traverseOrder, name);
        if (idx < 0) return ("0px","0px",$"{Cell}px",$"{Cell}px");

        // 上 10 格：0..9
        if (idx < TopCount)
        {
            int x = 20 + idx * (Cell + Gap);
            int y = 20;
            return ($"{x}px",$"{y}px",$"{Cell}px",$"{Cell}px");
        }

        // 右 4 格：10..13
        if (idx < TopCount + RightCount)
        {
            int j = idx - TopCount;
            int x = BoardW - Cell - 20;
            int y = 20 + (j+1) * (Cell + Gap);
            return ($"{x}px",$"{y}px",$"{Cell}px",$"{Cell}px");
        }

        // 右下角（機場）：14
        if (idx == TopCount + RightCount)
        {
            int x = BoardW - Cell - 20;
            int y = BoardH - Cell - 20;
            return ($"{x}px",$"{y}px",$"{Cell}px",$"{Cell}px");
        }

        // 下邊（右→左）：15..23（含 9 個，因為一個角已占）
        if (idx <= TopCount + RightCount + BottomCount)
        {
            int j = idx - (TopCount + RightCount + 1);
            int x = BoardW - Cell - 20 - (j+1) * (Cell + Gap);
            int y = BoardH - Cell - 20;
            return ($"{x}px",$"{y}px",$"{Cell}px",$"{Cell}px");
        }

        // 左邊：剩餘
        {
            int j = idx - (TopCount + RightCount + BottomCount + 1);
            int x = 20;
            int y = BoardH - Cell - 20 - (j+1) * (Cell + Gap);
            return ($"{x}px",$"{y}px",$"{Cell}px",$"{Cell}px");
        }
    }

    void RollDice()
    {
        var rand = new Random();
        lastRoll = rand.Next(1, 7);
        Game.PlayerIndex = (Game.PlayerIndex + lastRoll) % ring.Count;
        Game.Week++;

        // 🟩 確保每回合只有一種視窗會開啟
        showCardPicker = false;
        showTransportPicker = false;

        var tile = ring[Game.PlayerIndex];

        switch (tile.Type)
        {
            case "City":
                OpenCardPicker(tile);
                break;
            case "Transport":
                OpenTransportPicker(tile);
                break;
            case "Event":
                // 未來可接事件邏輯
                break;
        }
    }

    void OpenCardPicker(Tile tile)
    {
        currentTile = tile;
        currentTileTitle = $"抵達：{tile.Name}";
        var allCards = CardData.GetCardsForCity(tile.Name);
        foreach (var c in allCards) c.City = tile.Name;
        var rand = new Random();
        cardDeck = allCards.OrderBy(_ => rand.Next()).Take(4).ToList();
        showCardPicker = true;
    }

    void OpenTransportPicker(Tile tile)
    {
        if (tile.Type != "Transport") return; // ✅ 防止誤觸 City 格
        transportType = tile.Name;
        showTransportPicker = true;
        transportOptions.Clear();

        string[] destinations = transportType switch
        {
            "高鐵" => new[] { "台北","新北","桃園","新竹","苗栗","台中","彰化","雲林","嘉義","台南","高雄" },
            "機場" => new[] { "台北","高雄","台中","金馬","澎湖","台南","台東","花蓮","嘉義" },
            "台鐵" => new[] { "台北","新北","桃園","新竹","苗栗","彰化","雲林","嘉義","台南","高雄","花蓮","台東","屏東","宜蘭","基隆" },
            _ => Array.Empty<string>()
        };

        foreach (var dest in destinations)
        {
            if (RealFareNTD.TryGetValue((transportType, dest), out var fare))
                transportOptions.Add((dest, fare)); // ✅ 防呆，避免 KeyNotFound
        }

        currentTileTitle = $"🚆 {transportType} 搭乘目的地";
    }

    void PickCard(CardInfo card)
    {
        Game.Money += card.MoneyChange;
        Game.EcoScore += card.EcoChange;
        Game.SocialScore += card.SocialChange;
        showCardPicker = false;
        var newCard = card.Clone();
        if (currentTile != null) newCard.City = currentTile.Name;
        Game.AddCard(newCard);
    }

    void TravelTo(string city, int cost)
    {
        Game.Money -= cost;
        var dest = ring.FirstOrDefault(t => t.Name == city);
        if (dest != null)
        {
            Game.PlayerIndex = dest.Id;
            showTransportPicker = false;
            OpenCardPicker(dest);
        }
    }

    void CloseCardPicker() => showCardPicker = false;
    void CloseTransportPicker() => showTransportPicker = false;
}