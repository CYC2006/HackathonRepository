@page "/"
@using Hackathon.Data
@inject Hackathon.Data.GameState Game

<h2 style="text-align:center; font-size:2.2rem; margin-top:20px; margin-bottom:30px;">
    🌏 永續大富翁 🌏
</h2>

<div style="display:flex; justify-content:space-around; margin-bottom:30px; font-size:1.4rem; font-weight:600;">
    <div>💰 &nbsp; &nbsp; @Game.Money</div>
    <div>🌿 &nbsp; &nbsp; @Game.EcoScore</div>
    <div>🏛️ &nbsp; &nbsp; @Game.SocialScore</div>
    <div>📅 &nbsp; &nbsp; @Game.Week</div>
</div>

<div class="board">
    @for (int r = 0; r < ROWS; r++)
    {
        for (int c = 0; c < COLS; c++)
        {
            var name = grid[r, c];

            if (name == "空心")
            {
                <div class="void"></div>
            }
            else if (name == "空格")
            {
                <div class="empty-tile"></div>
            }
            else
            {
                var tile = tilesByPos.TryGetValue((r, c), out var t) ? t : null;
                bool isPlayer = tile is not null && tile.Id == playerIndex;

                <div class="tile @(isPlayer ? "player-tile" : "") @(IsCorner(name) ? "corner" : "")"
                     @ondblclick='() => { if (tile != null && tile.Type == "City") OpenCardPicker(tile); }'>
                    @name
                </div>
            }
        }
    }

    <div class="center-dice">
        <button class="dice-button" @onclick="RollDice">🎲</button>
        <div class="dice-result">@lastRoll</div>
    </div>
</div>

@if (showCardPicker)
{
    <div class="overlay">
        <div class="dialog">
            <h3 style="margin-bottom:12px;">@currentTileTitle</h3>

            <div class="card-list">
                @foreach (var card in cardDeck)
                {
                    <div class="card-item @card.ColorTag" @onclick="() => PickCard(card)">
                        <div class="card-title">@card.Title</div>
                        @if (!string.IsNullOrEmpty(card.ImagePath))
                        {
                            <img src="@card.ImagePath" alt="@card.Title" class="card-image" />
                        }
                        else
                        {
                            <div class="card-image"></div>
                        }
                        <div class="card-stats">
                            <div>💰 @card.MoneyChange 🌿 @card.EcoChange 🏛️ @card.SocialChange</div>
                        </div>
                        <div class="card-desc">@card.Description</div>
                    </div>
                }
            </div>

            <button class="close-button" @onclick="CloseCardPicker">✖</button>
        </div>
    </div>
}

@code {
    const int ROWS = 6, COLS = 10;

    int money = 1000, ecoScore = 0, socialScore = 0, week = 1;
    int lastRoll = 0, playerIndex = 0;

    bool showCardPicker = false;
    string currentTileTitle = "";
    Tile? currentTile;

    List<CardInfo> cardDeck = new();

    string[,] grid = new string[ROWS, COLS] {
        { "台南","高雄","屏東","台鐵","事件","台東","花蓮","事件","宜蘭","台北" },
        { "嘉義","空心","空心","空心","空心","空心","空心","空心","空心","基隆" },
        { "事件","空心","空心","空心","空心","空心","空心","空心","空心","新北" },
        { "雲林","空心","空心","空心","空心","空心","空心","空心","空心","事件" },
        { "彰化","空心","空心","空心","空心","空心","空心","空心","空心","桃園" },
        { "台中","事件","澎湖","南投","事件","苗栗","金馬","事件","新竹","機場" }
    };

    record Tile(int Id, string Name, string Type, int Row, int Col);
    Dictionary<(int r, int c), Tile> tilesByPos = new();
    List<Tile> ring = new();

    protected override void OnInitialized() => BuildTilesAndRing();

    void BuildTilesAndRing()
    {
        tilesByPos.Clear(); ring.Clear();

        string TypeOf(string n) => n switch
        {
            "事件" => "Event",
            "空格" => "Empty",
            "空心" => "Void",
            _ => "City"
        };

        for (int r = 0; r < ROWS; r++)
            for (int c = 0; c < COLS; c++)
                if (grid[r, c] is not ("空心" or "空格"))
                    tilesByPos[(r, c)] = new Tile(-1, grid[r, c], TypeOf(grid[r, c]), r, c);

        var path = new List<(int r, int c)>();
        for (int c = 0; c < COLS; c++) path.Add((0, c));
        for (int r = 1; r < ROWS; r++) path.Add((r, COLS - 1));
        for (int c = COLS - 2; c >= 0; c--) path.Add((ROWS - 1, c));
        for (int r = ROWS - 2; r >= 1; r--) path.Add((r, 0));

        int id = 0;
        foreach (var (r, c) in path)
        {
            var n = grid[r, c];
            if (n is "空格" or "空心") continue;
            var t = tilesByPos[(r, c)];
            var withId = new Tile(id++, t.Name, t.Type, r, c);
            tilesByPos[(r, c)] = withId;
            ring.Add(withId);
        }

        playerIndex = ring.FindIndex(t => t.Name == "台南");
        if (playerIndex < 0) playerIndex = 0;
    }

    void RollDice()
    {
        var rand = new Random();
        lastRoll = rand.Next(1, 7);
        playerIndex = (playerIndex + lastRoll) % ring.Count;
        Game.Week++;

        var tile = ring[playerIndex];
        if (tile.Type is "City" or "Event")
        {
            OpenCardPicker(tile);
        }
    }

    void OpenCardPicker(Tile tile)
    {
        currentTile = tile;
        currentTileTitle = $"抵達：{tile.Name}";
        // 直接從 CardData 取得完整10張卡片資料
        var allCards = CardData.GetCardsForCity(tile.Name);
        
        //  pick random 4 cards
        var rand = new Random();
        cardDeck = allCards.OrderBy(_ => rand.Next()).Take(4).ToList();
        
        showCardPicker = true;
    }

    void PickCard(CardInfo card)
    {
        Game.Money += card.MoneyChange;
        Game.EcoScore += card.EcoChange;
        Game.SocialScore += card.SocialChange;

        showCardPicker = false;
    }

    void CloseCardPicker() => showCardPicker = false;

    bool IsCorner(string n) => n is "台南" or "台中" or "台北" or "桃園";
}