@page "/"
@using Hackathon.Data
@inject Hackathon.Data.GameState Game

<h2 style="text-align:center; font-size:2.4rem; margin-top:28px; margin-bottom:36px;">
    🌏 永續大富翁 🌏
</h2>

<div style="display:flex; justify-content:space-around; margin-bottom:30px; font-size:1.4rem; font-weight:600;">
    <div>💰 &nbsp;&nbsp; @Game.Money</div>
    <div>🌿 &nbsp;&nbsp; @Game.EcoScore</div>
    <div>🏛️ &nbsp;&nbsp; @Game.SocialScore</div>
    <div>📅 &nbsp;&nbsp; @Game.Week</div>
</div>

<div class="board">
    @for (int r = 0; r < ROWS; r++)
    {
        for (int c = 0; c < COLS; c++)
        {
            var name = grid[r, c];

            if (name == "空心")
            {
                <div class="void"></div>
            }
            else
            {
                var tile = tilesByPos.TryGetValue((r, c), out var t) ? t : null;
                bool isPlayer = tile is not null && tile.Id == Game.PlayerIndex;

                <div class="tile @(isPlayer ? "player-tile" : "")"
                     @ondblclick='() => { if (tile != null && tile.Type == "City") OpenCardPicker(tile); }'>
                    @name
                </div>
            }
        }
    }

    <div class="center-dice">
        <button class="dice-button" @onclick="RollDice">🎲</button>
        <div class="dice-result">@lastRoll</div>
    </div>
</div>

@if (showCardPicker)
{
    <div class="overlay">
        <div class="dialog">
            <h3 style="margin-bottom:12px;">@currentTileTitle</h3>
            <div class="card-list">
                @foreach (var card in cardDeck)
                {
                    <div class="card-item" @onclick="() => PickCard(card)">
                        <div class="card-title">@card.Title</div>
                        <div class="card-meta">
                            <span class="card-city">@card.City</span>
                            <span class="card-rarity rarity-@card.Rarity">@card.Rarity</span>
                        </div>
                        @if (!string.IsNullOrEmpty(card.ImagePath))
                        {
                            <img src="@card.ImagePath" alt="@card.Title" class="card-image" />
                        }
                        else
                        {
                            <div class="card-image"></div>
                        }
                        <div class="card-stats">
                            <div>💰 @card.MoneyChange 🌿 @card.EcoChange 🏛️ @card.SocialChange</div>
                        </div>
                        <div class="card-desc">@card.Description</div>
                    </div>
                }
            </div>
            <button class="close-button" @onclick="CloseCardPicker">✖</button>
        </div>
    </div>
}

@if (showTransportPicker)
{
    <div class="overlay">
        <div class="dialog">
            <h3>@currentTileTitle</h3>
            <div class="transport-list">
                @foreach (var (city, cost) in transportOptions)
                {
                    <button class="transport-btn" @onclick="() => TravelTo(city, cost)">
                        @city &nbsp; $@cost
                    </button>
                }
            </div>
            <button class="close-button" @onclick="CloseTransportPicker">✖</button>
        </div>
    </div>
}

@code {
    const int ROWS = 6, COLS = 10;
    int lastRoll = 0;

    bool showCardPicker = false;
    bool showTransportPicker = false;
    string transportType = "";
    string currentTileTitle = "";
    Tile? currentTile;

    List<CardInfo> cardDeck = new();
    List<(string city, int cost)> transportOptions = new();

    // 🟦 車票價目表
    static readonly Dictionary<(string type, string to), int> RealFareNTD = new()
    {
        // 高鐵（南港出發）
        { ("高鐵","台北"),260 },{ ("高鐵","新北"),310 },{ ("高鐵","桃園"),500 },
        { ("高鐵","新竹"),700 },{ ("高鐵","苗栗"),920 },{ ("高鐵","台中"),1330 },
        { ("高鐵","彰化"),1510 },{ ("高鐵","雲林"),1510 },{ ("高鐵","嘉義"),1120 },
        { ("高鐵","台南"),1390 },{ ("高鐵","高雄"),1530 },

        // 機場（桃園出發）
        { ("機場","台北"),1000 },{ ("機場","高雄"),2800 },{ ("機場","台中"),2200 },
        { ("機場","金馬"),2400 },{ ("機場","澎湖"),2300 },{ ("機場","台南"),2500 },
        { ("機場","台東"),2700 },{ ("機場","花蓮"),3000 },{ ("機場","嘉義"),2200 },

        // 台鐵（台中出發）
        { ("台鐵","台北"),375 },{ ("台鐵","新北"),350 },{ ("台鐵","桃園"),340 },
        { ("台鐵","新竹"),310 },{ ("台鐵","苗栗"),120 },{ ("台鐵","彰化"),60 },
        { ("台鐵","雲林"),115 },{ ("台鐵","嘉義"),180 },{ ("台鐵","台南"),250 },
        { ("台鐵","高雄"),380 },{ ("台鐵","屏東"),430 },{ ("台鐵","宜蘭"),420 },
        { ("台鐵","花蓮"),750 },{ ("台鐵","台東"),920 },{ ("台鐵","基隆"),410 }
    };

    // 🧩 棋盤格設定
    string[,] grid = new string[ROWS, COLS] {
        { "台南","高雄","屏東","事件","台東","花蓮","事件","宜蘭","基隆","高鐵" },
        { "嘉義","空心","空心","空心","空心","空心","空心","空心","空心","新北" },
        { "事件","空心","空心","空心","空心","空心","空心","空心","空心","事件" },
        { "雲林","空心","空心","空心","空心","空心","空心","空心","空心","台北" },
        { "彰化","空心","空心","空心","空心","空心","空心","空心","空心","桃園" },
        { "台鐵","台中","澎湖","南投","事件","苗栗","金馬","事件","新竹","機場" }
    };

    record Tile(int Id, string Name, string Type, int Row, int Col);
    Dictionary<(int r,int c), Tile> tilesByPos = new();
    List<Tile> ring = new();

    protected override void OnInitialized() => BuildTilesAndRing();

    void BuildTilesAndRing()
    {
        tilesByPos.Clear();
        ring.Clear();

        // 🟩 類型識別修正版：確保不會誤判（Trim()）
        string TypeOf(string n)
        {
            n = n.Trim();
            return n switch
            {
                "事件" => "Event",
                "高鐵" or "機場" or "台鐵" => "Transport",
                "空心" => "Void",
                _ => "City"
            };
        }

        // 建立 tile map
        for (int r = 0; r < ROWS; r++)
        for (int c = 0; c < COLS; c++)
            if (grid[r, c] != "空心")
                tilesByPos[(r, c)] = new Tile(-1, grid[r, c], TypeOf(grid[r, c]), r, c);

        // 🟦 生成外圈路徑，避免重複格子
        var path = new List<(int, int)>();
        for (int c = 0; c < COLS; c++) path.Add((0, c));
        for (int r = 1; r < ROWS; r++) path.Add((r, COLS - 1));
        for (int c = COLS - 2; c >= 0; c--) path.Add((ROWS - 1, c));
        for (int r = ROWS - 2; r >= 1; r--) path.Add((r, 0));

        var visited = new HashSet<(int,int)>(); // ✅ 防止重複加入
        int id = 0;

        foreach (var (r, c) in path)
        {
            if (!visited.Add((r, c))) continue;
            var t = tilesByPos[(r, c)];
            var withId = new Tile(id++, t.Name, t.Type, r, c);
            tilesByPos[(r, c)] = withId;
            ring.Add(withId);
        }

        // 初始化玩家位置
        if (Game.PlayerIndex == 0 && Game.Week == 1)
            Game.PlayerIndex = ring.FindIndex(t => t.Name == "台南");
    }

    void RollDice()
    {
        var rand = new Random();
        lastRoll = rand.Next(1, 7);
        Game.PlayerIndex = (Game.PlayerIndex + lastRoll) % ring.Count;
        Game.Week++;

        // 🟩 確保每回合只有一種視窗會開啟
        showCardPicker = false;
        showTransportPicker = false;

        var tile = ring[Game.PlayerIndex];

        switch (tile.Type)
        {
            case "City":
                OpenCardPicker(tile);
                break;
            case "Transport":
                OpenTransportPicker(tile);
                break;
            case "Event":
                // 未來可接事件邏輯
                break;
        }
    }

    void OpenCardPicker(Tile tile)
    {
        currentTile = tile;
        currentTileTitle = $"抵達：{tile.Name}";
        var allCards = CardData.GetCardsForCity(tile.Name);
        foreach (var c in allCards) c.City = tile.Name;
        var rand = new Random();
        cardDeck = allCards.OrderBy(_ => rand.Next()).Take(4).ToList();
        showCardPicker = true;
    }

    void OpenTransportPicker(Tile tile)
    {
        if (tile.Type != "Transport") return; // ✅ 防止誤觸 City 格
        transportType = tile.Name;
        showTransportPicker = true;
        transportOptions.Clear();

        string[] destinations = transportType switch
        {
            "高鐵" => new[] { "台北","新北","桃園","新竹","苗栗","台中","彰化","雲林","嘉義","台南","高雄" },
            "機場" => new[] { "台北","高雄","台中","金馬","澎湖","台南","台東","花蓮","嘉義" },
            "台鐵" => new[] { "台北","新北","桃園","新竹","苗栗","彰化","雲林","嘉義","台南","高雄","花蓮","台東","屏東","宜蘭","基隆" },
            _ => Array.Empty<string>()
        };

        foreach (var dest in destinations)
        {
            if (RealFareNTD.TryGetValue((transportType, dest), out var fare))
                transportOptions.Add((dest, fare)); // ✅ 防呆，避免 KeyNotFound
        }

        currentTileTitle = $"🚆 {transportType} 搭乘目的地";
    }

    void PickCard(CardInfo card)
    {
        Game.Money += card.MoneyChange;
        Game.EcoScore += card.EcoChange;
        Game.SocialScore += card.SocialChange;
        showCardPicker = false;
        var newCard = card.Clone();
        if (currentTile != null) newCard.City = currentTile.Name;
        Game.AddCard(newCard);
    }

    void TravelTo(string city, int cost)
    {
        Game.Money -= cost;
        var dest = ring.FirstOrDefault(t => t.Name == city);
        if (dest != null)
        {
            Game.PlayerIndex = dest.Id;
            showTransportPicker = false;
            OpenCardPicker(dest);
        }
    }

    void CloseCardPicker() => showCardPicker = false;
    void CloseTransportPicker() => showTransportPicker = false;
}